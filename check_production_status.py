#!/usr/bin/env python3
"""
Script de diagnostic pour v√©rifier la configuration de production
"""

import os
import sys
import logging
from datetime import datetime

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """V√©rifie les variables d'environnement critiques"""
    logger.info("üîç V√©rification des variables d'environnement...")
    
    critical_vars = [
        'DATABASE_URL',
        'SECRET_KEY',
        'FLASK_ENV',
        'FLASK_DEBUG'
    ]
    
    optional_vars = [
        'MAIL_USERNAME',
        'MAIL_PASSWORD',
        'GOOGLE_CLIENT_ID',
        'GOOGLE_CLIENT_SECRET'
    ]
    
    print("\nüìã Variables d'environnement critiques:")
    for var in critical_vars:
        value = os.environ.get(var)
        if value:
            if var == 'DATABASE_URL':
                # Masquer l'URL de la base de donn√©es pour la s√©curit√©
                masked_value = value[:20] + "..." if len(value) > 20 else value
                print(f"   ‚úÖ {var}: {masked_value}")
            else:
                print(f"   ‚úÖ {var}: {value}")
        else:
            print(f"   ‚ùå {var}: NON D√âFINIE")
    
    print("\nüìã Variables d'environnement optionnelles:")
    for var in optional_vars:
        value = os.environ.get(var)
        if value:
            print(f"   ‚úÖ {var}: {value}")
        else:
            print(f"   ‚ö†Ô∏è  {var}: NON D√âFINIE (optionnel)")

def check_database_connection():
    """V√©rifie la connexion √† la base de donn√©es"""
    logger.info("üîç V√©rification de la connexion √† la base de donn√©es...")
    
    try:
        # Importer app et db
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from app import app, db
        
        with app.app_context():
            # Tester la connexion
            db.session.execute('SELECT 1')
            print("   ‚úÖ Connexion √† la base de donn√©es r√©ussie")
            
            # V√©rifier les tables
            from app import User, Application, Appointment, JobOffer
            tables = [User, Application, Appointment, JobOffer]
            
            for table in tables:
                try:
                    count = table.query.count()
                    print(f"   ‚úÖ Table {table.__name__}: {count} enregistrements")
                except Exception as e:
                    print(f"   ‚ùå Erreur avec la table {table.__name__}: {e}")
                    
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion √† la base de donn√©es: {e}")

def check_admin_users():
    """V√©rifie les utilisateurs administrateurs"""
    logger.info("üîç V√©rification des utilisateurs administrateurs...")
    
    try:
        from app import app, db, User
        
        with app.app_context():
            admins = User.query.filter_by(user_type='admin').all()
            
            if admins:
                print(f"   ‚úÖ {len(admins)} utilisateur(s) administrateur(s) trouv√©(s):")
                for admin in admins:
                    print(f"      ‚Ä¢ {admin.email} ({admin.first_name} {admin.last_name}) - Actif: {admin.is_active}")
            else:
                print("   ‚ùå Aucun utilisateur administrateur trouv√©")
                
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des admins: {e}")

def check_file_permissions():
    """V√©rifie les permissions des fichiers"""
    logger.info("üîç V√©rification des permissions des fichiers...")
    
    critical_files = [
        'app.py',
        'config.py',
        'requirements.txt',
        'static/uploads'
    ]
    
    for file_path in critical_files:
        if os.path.exists(file_path):
            if os.access(file_path, os.R_OK):
                print(f"   ‚úÖ {file_path}: Lisible")
            else:
                print(f"   ‚ùå {file_path}: Non lisible")
                
            if os.path.isfile(file_path):
                if os.access(file_path, os.W_OK):
                    print(f"   ‚úÖ {file_path}: Modifiable")
                else:
                    print(f"   ‚ö†Ô∏è  {file_path}: Non modifiable")
        else:
            print(f"   ‚ùå {file_path}: N'existe pas")

def check_python_environment():
    """V√©rifie l'environnement Python"""
    logger.info("üîç V√©rification de l'environnement Python...")
    
    print(f"   ‚úÖ Version Python: {sys.version}")
    print(f"   ‚úÖ R√©pertoire de travail: {os.getcwd()}")
    print(f"   ‚úÖ Variables d'environnement PATH: {len(os.environ.get('PATH', '').split(':'))} r√©pertoires")

def check_requirements():
    """V√©rifie les d√©pendances Python"""
    logger.info("üîç V√©rification des d√©pendances...")
    
    try:
        import flask
        print(f"   ‚úÖ Flask: {flask.__version__}")
    except ImportError:
        print("   ‚ùå Flask: Non install√©")
    
    try:
        import flask_sqlalchemy
        print(f"   ‚úÖ Flask-SQLAlchemy: {flask_sqlalchemy.__version__}")
    except ImportError:
        print("   ‚ùå Flask-SQLAlchemy: Non install√©")
    
    try:
        import flask_login
        print(f"   ‚úÖ Flask-Login: Install√©")
    except ImportError:
        print("   ‚ùå Flask-Login: Non install√©")

def main():
    """Fonction principale"""
    print("üöÄ Diagnostic de la configuration de production MondeRH")
    print("=" * 60)
    print(f"üìÖ Date et heure: {datetime.now()}")
    print(f"üåç Environnement: {os.environ.get('FLASK_ENV', 'Non d√©fini')}")
    print("=" * 60)
    
    check_environment_variables()
    print()
    
    check_python_environment()
    print()
    
    check_requirements()
    print()
    
    check_file_permissions()
    print()
    
    check_database_connection()
    print()
    
    check_admin_users()
    print()
    
    print("=" * 60)
    print("üéØ Recommandations:")
    print("   1. V√©rifiez que DATABASE_URL est correctement configur√©e")
    print("   2. Assurez-vous que SECRET_KEY est d√©finie et s√©curis√©e")
    print("   3. V√©rifiez que FLASK_ENV=production")
    print("   4. Assurez-vous qu'au moins un utilisateur admin existe")
    print("   5. V√©rifiez les logs de l'application pour plus de d√©tails")

if __name__ == "__main__":
    main() 